{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","undefined","csv","setCsv","columns","setColumns","data","setData","console","log","type","accept","onChange","e","target","files","onClick","preventDefault","file","reader","FileReader","onload","evt","bstr","result","wb","XLSX","wsname","SheetNames","ws","Sheets","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","map","c","name","selector","processData","sheet_to_csv","header","readAsBinaryString","pagination","highlightOnHover","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAyFeA,MArFf,WAAgB,IAAD,EACQC,wBAASC,GADjB,mBACNC,EADM,KACFC,EADE,OAEiBH,mBAAS,IAF1B,mBAENI,EAFM,KAEGC,EAFH,OAGWL,mBAAS,IAHpB,mBAGNM,EAHM,KAGAC,EAHA,KAgEb,OADFC,QAAQC,IAAI,SAER,gCACE,wDACA,iCACE,uBACEC,KAAK,OACLC,OAAO,kBACPC,SAAW,SAACC,GAAD,OAAOV,EAAOU,EAAEC,OAAOC,MAAM,OACxC,uBAAM,uBACR,uBAAOL,KAAK,SAASM,QA3BF,SAAAH,GACvBA,EAAEI,iBACF,IAAMC,EAAOhB,EACPiB,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GAEf,IAAMC,EAAOD,EAAIR,OAAOU,OAClBC,EAAKC,OAAUH,EAAM,CAAEb,KAAM,WAE7BiB,EAASF,EAAGG,WAAW,GACvBC,EAAKJ,EAAGK,OAAOH,IAlDL,SAAAI,GAKlB,IAJA,IAAMC,EAAkBD,EAAWE,MAAM,WACnCC,EAAUF,EAAgB,GAAGC,MAAM,uCAEnCE,EAAO,GACJC,EAAI,EAAGA,EAAIJ,EAAgBK,OAAQD,IAAK,CAC/C,IAAME,EAAMN,EAAgBI,GAAGH,MAAM,uCACrC,GAAIC,GAAWI,EAAID,SAAWH,EAAQG,OAAQ,CAE5C,IADA,IAAME,EAAM,GACHC,EAAI,EAAGA,EAAIN,EAAQG,OAAQG,IAAK,CACvC,IAAIC,EAAIH,EAAIE,GACRC,EAAEJ,OAAS,IACA,MAATI,EAAE,KACJA,EAAIA,EAAEC,UAAU,EAAGD,EAAEJ,OAAS,IACR,MAApBI,EAAEA,EAAEJ,OAAS,KACfI,EAAIA,EAAEC,UAAUD,EAAEJ,OAAS,EAAG,KAE9BH,EAAQM,KACVD,EAAIL,EAAQM,IAAMC,GAKlBE,OAAOC,OAAOL,GAAKM,QAAO,SAAAC,GAAC,OAAIA,KAAGT,OAAS,GAC7CF,EAAKY,KAAKR,IAMhB,IAAMnC,EAAU8B,EAAQc,KAAI,SAAAC,GAAC,MAAK,CAChCC,KAAMD,EACNE,SAAUF,MAGZ1C,EAAQ4B,GACR9B,EAAWD,GAiBTgD,CADa1B,QAAW2B,aAAaxB,EAAI,CAAEyB,OAAQ,MAGrDnC,EAAOoC,mBAAmBrC,SAajB,uBACP,cAAC,IAAD,CACEsC,YAAU,EACVC,kBAAgB,EAChBrD,QAASA,EACTE,KAAMA,QCvECoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d4a783f3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport DataTable from 'react-data-table-component';\n \nfunction App() {\n  const [csv,setCsv] = useState(undefined);\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n \n  // process CSV data\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n \n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n      if (headers && row.length === headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] === '\"')\n              d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] === '\"')\n              d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n \n        // remove the blank rows\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n \n    // prepare columns list from headers\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c,\n    }));\n \n    setData(list);\n    setColumns(columns);\n  }\n \n  // handle file upload\n  const handleFileUpload = e => {\n    e.preventDefault();\n    const file = csv;\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: 'binary' });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n      processData(data);\n    };\n    reader.readAsBinaryString(file);\n  }\nconsole.log('Check');\n  return (\n    <div>\n      <h3>Read CSV file in React</h3>\n      <form>\n        <input\n          type=\"file\"\n          accept=\".csv,.xlsx,.xls\"\n          onChange={ (e) => setCsv(e.target.files[0])}\n        /><br /><br />\n        <input type=\"submit\" onClick={handleFileUpload} />\n      </form><br />\n      <DataTable\n        pagination\n        highlightOnHover\n        columns={columns}\n        data={data}\n      />\n    </div>\n  );\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}